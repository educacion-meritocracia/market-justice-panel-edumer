#| label: data
load(file = here("output/data/db_proc.RData"))
glimpse(db_proc)
# Chunk 4
print(summarytools::dfSummary(db_proc), method="render")
# Chunk 5
M1 <- psych::polychoric(db_proc[db_proc$ola==1,][c(4:11,22)])
P1 <- cor(db_proc[db_proc$ola==1,][c(4:11,22)], method = "pearson", use = "complete.obs")
diag(M1$rho) <- NA
diag(P1) <- NA
M1$rho[9,] <- P1[9,]
M2 <- psych::polychoric(db_proc[db_proc$ola==2,][c(4:11,22)])
P2 <- cor(db_proc[db_proc$ola==2,][c(4:11,22)], method = "pearson", use = "complete.obs")
diag(M2$rho) <- NA
diag(P2) <- NA
M2$rho[9,] <- P2[9,]
rownames(M1$rho) <- c("A. Percepción Esfuerzo",
"B. Percepción Talento",
"C. Percepción Padres Ricos",
"D. Percepción Contactos",
"E. Preferencias Esfuerzo",
"F. Preferencias Talento",
"G. Preferencias Padres Ricos",
"H. Preferencias Contactos",
"I. Market Justice Preferences")
#set Column names of the matrix
colnames(M1$rho) <-c("(A)", "(B)","(C)","(D)","(E)","(F)","(G)",
"(H)","(I)")
rownames(P1) <- c("A. Percepción Esfuerzo",
"B. Percepción Talento",
"C. Percepción Padres Ricos",
"D. Percepción Contactos",
"E. Preferencias Esfuerzo",
"F. Preferencias Talento",
"G. Preferencias Padres Ricos",
"H. Preferencias Contactos",
"I. Market Justice Preferences")
#set Column names of the matrix
colnames(P1) <-c("(A)", "(B)","(C)","(D)","(E)","(F)","(G)",
"(H)","(I)")
rownames(M2$rho) <- c("A. Percepción Esfuerzo",
"B. Percepción Talento",
"C. Percepción Padres Ricos",
"D. Percepción Contactos",
"E. Preferencias Esfuerzo",
"F. Preferencias Talento",
"G. Preferencias Padres Ricos",
"H. Preferencias Contactos",
"I. Market Justice Preferences")
#set Column names of the matrix
colnames(M2$rho) <-c("(A)", "(B)","(C)","(D)","(E)","(F)","(G)",
"(H)","(I)")
rownames(P2) <- c("A. Percepción Esfuerzo",
"B. Percepción Talento",
"C. Percepción Padres Ricos",
"D. Percepción Contactos",
"E. Preferencias Esfuerzo",
"F. Preferencias Talento",
"G. Preferencias Padres Ricos",
"H. Preferencias Contactos",
"I. Market Justice Preferences")
#set Column names of the matrix
colnames(P2) <-c("(A)", "(B)","(C)","(D)","(E)","(F)","(G)",
"(H)","(I)")
# Chunk 6: fig-matriz1
#| label: fig-matriz1
#| fig-cap: Matriz de correlaciones para Ola 1
#| fig-cap-location: top
#| out-width: '80%'
corrplot::corrplot(
M1$rho,
method = "color",
type = "upper",
col = colorRampPalette(c("#E16462", "white", "#0D0887"))(12),
tl.pos = "lt",
tl.col = "black",
addrect = 2,
rect.col = "black",
addCoef.col = "black",
cl.cex = 0.8,
cl.align.text = 'l',
number.cex = 1.1,
na.label = "-",
bg = "white"
)
# Chunk 7: fig-matriz2
#| label: fig-matriz2
#| fig-cap: Matriz de correlaciones para Ola 2
#| fig-cap-location: top
#| out-width: '80%'
corrplot::corrplot(
M2$rho,
method = "color",
type = "upper",
col = colorRampPalette(c("#E16462", "white", "#0D0887"))(12),
tl.pos = "lt",
tl.col = "black",
addrect = 2,
rect.col = "black",
addCoef.col = "black",
cl.cex = 0.8,
cl.align.text = 'l',
number.cex = 1.1,
na.label = "-",
bg = "white"
)
# Chunk 8
db_1 <- subset(db_proc, ola == 1)
db_2 <- subset(db_proc, ola == 2)
model_cfa <- '
perc_merit = ~ perc_effort + perc_talent
perc_nmerit = ~ perc_rich_parents + perc_contact
pref_merit = ~ pref_effort + pref_talent
pref_nmerit = ~ pref_rich_parents + pref_contact
'
m1_cfa <- cfa(model = model_cfa,
data = db_1,
estimator = "DWLS",
ordered = T,
std.lv = F)
m2_cfa <- cfa(model = model_cfa,
data = db_2,
estimator = "DWLS",
ordered = T,
std.lv = F)
# Chunk 9: tbl-cargas
#| label: tbl-cargas
#| tbl-cap: "Cargas factoriales en ambas Olas"
#| tbl-cap-location: top
left_join(
standardizedsolution(m1_cfa) %>%
filter(op=="=~") %>%
select(lhs,rhs,loadings_w01=est.std,pvalue_w01=pvalue),
standardizedsolution(m2_cfa) %>%
filter(op=="=~") %>%
select(lhs,rhs,loadings_w02=est.std,pvalue_w02=pvalue)
) %>%
mutate(
across(
.cols = c(pvalue_w01, pvalue_w02),
.fns = ~ case_when(
. < 0.05 & . > 0.01 ~ "*",
. <= 0.01 ~ "**",
TRUE ~ "")
),
loadings_w01 = paste(round(loadings_w01, 3), pvalue_w01, sep = " "),
loadings_w02 = paste(round(loadings_w02, 3), pvalue_w02, sep = " "),
lhs = case_when(
lhs == "perc_merit" ~ "Percepción meritocrática",
lhs == "perc_nmerit" ~ "Percepción no meritocrática",
lhs == "pref_merit" ~ "Preferencia meritocrática",
lhs == "pref_nmerit" ~ "Preferencia no meritocrática"),
rhs = case_when(
rhs == "perc_effort" ~ "Percepción esfuerzo",
rhs == "perc_talent" ~ "Percepción talento",
rhs == "perc_rich_parents" ~ "Percepción padres ricos",
rhs == "perc_contact" ~ "Percepción contactos",
rhs == "pref_effort" ~ "Preferencia esfuerzo",
rhs == "pref_talent" ~ "Preferencia talento",
rhs == "pref_rich_parents" ~ "Preferencia padres ricos",
rhs == "pref_contact" ~ "Preferencia contactos"),
simbol = "=~"
) %>%
select(lhs, simbol, rhs, loadings_w01, loadings_w02) %>%
kableExtra::kable(format = "markdown",
booktabs= T,
escape = F,
align = 'c',
col.names = c("Factor", "", "Indicador", "Cargas Ola 1", "Cargas Ola 2"),
caption = NULL) %>%
kableExtra::add_footnote(label = "** p<0.01, * p<0.5", notation = "none")
# Chunk 10: tbl-fit1
#| label: tbl-fit1
#| tbl-cap: "Indicadores de ajuste"
#| tbl-cap-location: top
cfa_tab_fit <- function(models,
names = NULL,
colnames_fit  = c("","$N$","Estimator","$\\chi^2$ (df)","CFI","TLI","RMSEA 90% CI [Lower-Upper]", "SRMR")) {
get_fit_df <- function(model) {
sum_fit <- fitmeasures(model, output = "matrix")[c("chisq","pvalue","df","cfi","tli",
"rmsea","rmsea.ci.lower","rmsea.ci.upper",
"srmr"),]
sum_fit$nobs <- nobs(model)
sum_fit$est  <- summary(model)$optim$estimator
sum_fit <- data.frame(sum_fit) %>%
dplyr::mutate(
dplyr::across(
.cols = c(cfi, tli, rmsea, rmsea.ci.lower, rmsea.ci.upper, srmr),
.fns  = ~ round(., 3)
),
stars   = gtools::stars.pval(pvalue),
chisq   = paste0(round(chisq,3), " (", df, ") ", stars),
rmsea.ci= paste0(rmsea, " [", rmsea.ci.lower, "-", rmsea.ci.upper, "]")
) %>%
dplyr::select(nobs, est, chisq, cfi, tli, rmsea.ci, srmr)
return(sum_fit)
}
fit_list <- purrr::map(models, get_fit_df)
for (i in seq_along(fit_list)) {
fit_list[[i]]$names <- names[i]
}
sum_fit <- dplyr::bind_rows(fit_list)
fit_table <- sum_fit %>%
dplyr::select(names, dplyr::everything()) %>%
kableExtra::kable(
format     = "markdown",
digits     = 3,
booktabs   = TRUE,
col.names  = colnames_fit,
caption    = NULL
) %>%
kableExtra::kable_styling(
full_width        = TRUE,
font_size         = 11,
latex_options     = "HOLD_position",
bootstrap_options = c("striped", "bordered")
)
return(
list(
fit_table = fit_table,
sum_fit = sum_fit)
)
}
cfa_tab_fit(
models = list(m1_cfa, m2_cfa),
names = c("Ola 1", "Ola 2")
)$fit_table
# Chunk 11
scores_1 <- lavPredict(m1_cfa)
db_1$perc_merit_score  <- scores_1[, "perc_merit"]
db_1$perc_nmerit_score <- scores_1[, "perc_nmerit"]
db_1$pref_merit_score  <- scores_1[, "pref_merit"]
db_1$pref_nmerit_score <- scores_1[, "pref_nmerit"]
scores_2 <- lavPredict(m2_cfa)
db_2$perc_merit_score  <- scores_2[, "perc_merit"]
db_2$perc_nmerit_score <- scores_2[, "perc_nmerit"]
db_2$pref_merit_score  <- scores_2[, "pref_merit"]
db_2$pref_nmerit_score <- scores_2[, "pref_nmerit"]
db_proc <- rbind(db_1, db_2)
# Chunk 12
m0 <- lmer(mjp ~ 1 + (1 | id_estudiante),
data = db_proc)
performance::icc(m0, by_group = T)
db_proc <- db_proc %>%
group_by(id_estudiante) %>%
mutate(inequality_mean = mean(inequality, na.rm = T),
inequality_cwc = inequality - inequality_mean,
perc_merit_score_mean = mean(perc_merit_score, na.rm = T),
perc_merit_score_cwc = perc_merit_score - perc_merit_score_mean,
perc_nmerit_score_mean = mean(perc_nmerit_score, na.rm = T),
perc_nmerit_score_cwc = perc_nmerit_score - perc_nmerit_score_mean,
pref_merit_score_mean = mean(pref_merit_score, na.rm = T),
pref_merit_score_cwc = pref_merit_score - pref_merit_score_mean,
pref_nmerit_score_mean = mean(pref_nmerit_score, na.rm = T),
pref_nmerit_score_cwc = pref_nmerit_score - pref_nmerit_score_mean,
school_talent_mean = mean(school_talent, na.rm = T),
school_talent_cwc = school_talent - school_talent_mean,
school_effort_mean = mean(school_effort, na.rm = T),
school_effort_cwc = school_effort - school_effort_mean
) %>%
ungroup()
m1 <- lmer(mjp ~ 1 + perc_merit_score_mean + perc_merit_score_cwc + (1 | id_estudiante),
data = db_proc)
m2 <- lmer(mjp ~ 1 + perc_nmerit_score_mean + perc_nmerit_score_cwc + (1 | id_estudiante),
data = db_proc)
m3 <- lmer(mjp ~ 1 + pref_merit_score_mean + pref_merit_score_cwc + (1 | id_estudiante),
data = db_proc)
m4 <- lmer(mjp ~ 1 + pref_nmerit_score_mean + pref_nmerit_score_cwc + (1 | id_estudiante),
data = db_proc)
m5 <- lmer(mjp ~ 1 + perc_merit_score_mean + perc_merit_score_cwc +
perc_nmerit_score_mean + perc_nmerit_score_cwc +
pref_merit_score_mean + pref_merit_score_cwc +
pref_nmerit_score_mean + pref_nmerit_score_cwc +
(1 | id_estudiante),
data = db_proc)
m6 <- lmer(mjp ~ 1 + perc_merit_score_mean + perc_merit_score_cwc +
perc_nmerit_score_mean + perc_nmerit_score_cwc +
pref_merit_score_mean + pref_merit_score_cwc +
pref_nmerit_score_mean + pref_nmerit_score_cwc +
school_effort_mean + school_effort_cwc +
school_talent_mean + school_talent_cwc +
(1 | id_estudiante),
data = db_proc)
m7 <- lmer(mjp ~ 1 + perc_merit_score_mean + perc_merit_score_cwc +
perc_nmerit_score_mean + perc_nmerit_score_cwc +
pref_merit_score_mean + pref_merit_score_cwc +
pref_nmerit_score_mean + pref_nmerit_score_cwc +
school_effort_mean + school_effort_cwc +
school_talent_mean + school_talent_cwc +
gender + age + books + parental_educ + cohort_level + ola +
(1 | id_estudiante),
data = db_proc)
#| label: tbl-modelos
#| results: asis
#| tbl-cap: "Modelos multinivel longitudinal para preferencias por justicia de mercado"
#| tbl-cap-location: top
ccoef <- list(
"(Intercept)" = "Intercepto",
perc_merit_score_mean = "Percepción meritocrática (BE)",
perc_merit_score_cwc = "Percepción meritocrática (WE)",
perc_nmerit_score_mean = "Percepción no meritocrática (BE)",
perc_nmerit_score_cwc = "Percepción no meritocrática (WE)",
pref_merit_score_mean = "Preferencia meritocrática (BE)",
pref_merit_score_cwc = "Preferencia meritocrática (WE)",
pref_nmerit_score_mean = "Preferencia no meritocrática (BE)",
pref_nmerit_score_cwc = "Preferencia no meritocrática (WE)",
school_effort_mean = "Esfuerzo escuela (BE)",
school_effort_cwc = "Esfuerzo escuela (WE)",
school_talent_mean = "Talento escuela (BE)",
school_talent_cwc = "Talento escuela (WE)",
genderMujer = "Mujer (Ref.= Hombre)",
age = "Edad",
"booksMás de 25" = "Más de 25 libros (Ref.= Menos de 25)",
"parental_educSecundaria" = "Secundaria",
"parental_educSuperior técnica" = "Superior técnica",
"parental_educUniversitaria o Posgrado" = "Universitaria o posgrado",
"parental_educValor perdido" = "Valor perdido",
cohort_levelMedia = "Media (Ref.= Básica)",
ola2 = "Ola 2 (Ref.= Ola 1)"
)
texreg::htmlreg(list(m1, m2, m3, m4, m5, m6, m7),
custom.model.names = c(paste0("Modelo ", seq(1:7))),
caption = NULL,
stars = c(0.05, 0.01, 0.001),
custom.coef.map = ccoef,
groups = list("Educación parental (Ref.= Primaria o menos)" = 17:20),
custom.note = "\\item Nota: Celdas contienen coeficientes de regresión con errores estándares entre paréntesis. %stars. \\\\ \\item Fuente: elaboración propia con datos agrupados de EDUMER 2022-2023 (n = 914)",
threeparttable = T,
leading.zero = T,
float.pos = "h!",
use.packages = F,
booktabs = T,
scalebox = 1)
m7
summary(m7)
screenreg(m7)
#| label: setup
#| include: false
library(knitr)
knitr::opts_chunk$set(echo = F,
warning = F,
error = F,
message = F)
if (! require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, car, sjmisc, sjPlot, sjlabelled, stargazer, kableExtra, corrplot, texreg, ggplot2, ggpubr, lavaan, haven, lme4, shadowtext)
options(scipen=999)
rm(list = ls())
load(here::here("../../input/data/proc/data.RData"))
load(here::here("../input/data/proc/data.RData"))
load(here::here("input/data/proc/data.RData"))
View(data)
data <- data %>%
mutate(curso_estudiante = case_when(
grepl("^(2|1)", curso_estudiante, ignore.case = TRUE) ~ 'Media',
grepl("^(7|6)", curso_estudiante, ignore.case = TRUE) ~ 'Basica',
TRUE ~ curso_estudiante  # mantener el valor original si no coincide con ninguna condición
))
data <- data  %>% group_by(id_estudiante) %>%
mutate(curso_estudiante_rec = ifelse(ola == 2 & is.na(curso_estudiante),
curso_estudiante[ola == 1],
curso_estudiante)) %>% ungroup()
data <- data %>%
group_by(id_estudiante) %>%
mutate(atricion = ifelse(all(c(1, 2) %in% ola), 1, 0)) %>%
ungroup()
data <- data %>% filter(atricion==1)
names(data)
data <- data %>% mutate(mjp = mean(just_educ, just_salud, just_pensiones, na.rm=TRUE))
data <- data %>% mutate(mjp = mean(c(just_educ, just_salud, just_pensiones), na.rm=TRUE))
summary(data$mjp)
data <- data %>% mutate(mjp = mean(just_educ, just_salud, just_pensiones, na.rm=TRUE))
data <- data %>% mutate(mjp = rowMeans(select(., just_educ, just_salud, just_pensiones), na.rm = TRUE))
summary(data$mjp)
reg <- lm(mjp ~ ola + curso_estudiante + genero_ES + perc_esfuerzo_soc + perc_talento_soc + perc_merit_soc + perc_padres_ricos + perc_contactos + pref_esfuerzo_soc + pref_talento_soc + pref_padres_ricos + pref_contactos + perc_esfuerzo_esc + perc_talento_esc + perc_merit_esc, data=data)
reg <- lm(mjp ~ ola + curso_estudiante + genero_ES + perc_esfuerzo_soc + perc_talento_soc + perc_merit_soc + perc_padres_ricos + perc_contactos + pref_esfuerzo_soc + pref_talento_soc + pref_padres_ricos + pref_contactos + perc_esfuerzo_esc + perc_talento_esc + perc_merit_esc, data=data)
reg <- lm(mjp ~ ola + genero_ES + perc_esfuerzo_soc + perc_talento_soc + perc_merit_soc + perc_padres_ricos + perc_contactos + pref_esfuerzo_soc + pref_talento_soc + pref_padres_ricos + pref_contactos + perc_esfuerzo_esc + perc_talento_esc + perc_merit_esc, data=data)
texreg::knitreg(reg)
sjPlot::plot_model(reg)
sjPlot::plot_model(reg,
vline.color='red')
sjPlot::plot_model(reg,
vline.color='red',
title="")
sjPlot::plot_model(reg,
vline.color='red',
title="",
show.values=TRUE)
sjPlot::plot_model(reg,
vline.color='red',
title="",
show.values=TRUE,
value.size=0.5)
sjPlot::plot_model(reg,
vline.color='red',
title="",
show.values=TRUE,
value.size=1)
sjPlot::plot_model(reg,
vline.color='red',
title="",
show.values=TRUE)
sjPlot::plot_model(reg,
vline.color='red',
title="",
show.values=TRUE,
value.size=5)
sjPlot::plot_model(reg,
vline.color='red',
title="",
show.values=TRUE,
value.size=6)
sjPlot::plot_model(reg,
vline.color='red',
title="",
show.values=TRUE,
value.size=12)
sjPlot::plot_model(reg,
vline.color='red',
title="",
show.values=TRUE,
value.size=4)
sjPlot::plot_model(reg,
vline.color='red',
title="",
show.values=TRUE,
value.size=4,
dot.size=0.5)
sjPlot::plot_model(reg,
vline.color='red',
title="",
show.values=TRUE,
value.size=4,
dot.size=2)
sjPlot::plot_model(reg,
vline.color='red',
title="",
show.values=TRUE,
value.size=4,
dot.size=2,
line.size=1)
sjPlot::plot_model(reg,
vline.color='red',
title = "", #quitar titulo
show.values = TRUE, #mostrar valor de efectos
dot.size = 3, #tamaño circulos
value.size = 3.5, #tamaño valor efectoss
spacing = .7, #espacio entre efectos
# axis.labels = rev(c("School talent",
#                     "School effort",
#                     "Social talent",
#                     "Social effort",
#                     "Deservingness"))
)
sjPlot::plot_model(reg,
title = "", #quitar titulo
show.values = TRUE, #mostrar valor de efectos
dot.size = 1.3, #tamaño circulos
line.size = 1, #tamaño CI
value.size = 3.5, #tamaño valor efectoss
spacing = .7, #espacio entre efectos
vline.color = "red", # linea roja en punto neutro (1)
# axis.labels = rev(c("School talent",
#                     "School effort",
#                     "Social talent",
#                     "Social effort",
#                     "Deservingness"))
)
names(data)
sjPlot::plot_model(reg,
title = "", #quitar titulo
show.values = TRUE, #mostrar valor de efectos
dot.size = 1.3, #tamaño circulos
line.size = 1, #tamaño CI
value.size = 3.5, #tamaño valor efectoss
spacing = .7, #espacio entre efectos
vline.color = "red", # linea roja en punto neutro (1)
axis.labels = rev(c("perc esfuerzo",
"perc talento",
"perc merito",
"perc padres ricos",
"perc contactos",
"pref esfuerzo",
"pref talento",
"pref padres ricos",
"pref contactos",
"perc esfuerzo (esc)",
"perc talento (esc)",
"perc merito (esc)"))
)
sjPlot::plot_model(reg,
title = "", #quitar titulo
show.values = TRUE, #mostrar valor de efectos
dot.size = 1.3, #tamaño circulos
line.size = 1, #tamaño CI
value.size = 3.5, #tamaño valor efectoss
spacing = .7, #espacio entre efectos
vline.color = "red", # linea roja en punto neutro (1)
axis.labels = rev(c("Ola 2 (ref: ola 1)",
"Mujer (ref: Hombre)",
"perc esfuerzo",
"perc talento",
"perc merito",
"perc padres ricos",
"perc contactos",
"pref esfuerzo",
"pref talento",
"pref padres ricos",
"pref contactos",
"perc esfuerzo (esc)",
"perc talento (esc)",
"perc merito (esc)"))
)
